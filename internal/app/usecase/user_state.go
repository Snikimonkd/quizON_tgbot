package usecase

import (
	"context"
	"fmt"
	"quizon_bot/internal/generated/postgres/public/model"
	"quizon_bot/internal/utils"

	"github.com/jackc/pgx/v5"
	tgbotapi "github.com/matterbridge/telegram-bot-api/v6"
)

const regNo string = `üò™ –í–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–ª—å–Ω–æ –ö–≤–∏–∑OFF...

–ë—É–¥–µ–º –æ—á–µ–Ω—å –∂–¥–∞—Ç—å –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–∞—Ö! –ê —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —É—Å–ø–µ—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 
üìé [–≥—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ](https://vk.com/quizonmsk)
üìé [Telegram-–∫–∞–Ω–∞–ª](https://t.me/quizonmsk)

–î–æ –≤—Å—Ç—Ä–µ—á–∏!`

const regSuccess string = `ü§ì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –ø–µ—Ä–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ö–≤–∏–∑ON —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Äî —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!

–ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–µ –Ω–æ–≤–æ–π –ë–∞—É–º–∞–Ω—Å–∫–æ–π –ª–∏–≥–∏ –ö–≤–∏–∑ON. –ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ –∏–≥—Ä–∞ –ø—Ä–æ–π–¥–µ—Ç: 
‚ö°Ô∏è4 –æ–∫—Ç—è–±—Ä—è, 19:00 
‚ö°Ô∏è345 –∞—É–¥. (–ì–£–ö) 

–ï—Å–ª–∏ –ø–æ–º–µ–Ω—è—é—Ç—Å—è –ø–ª–∞–Ω—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –ø–∏—à–∏ [–ú–∞—à–µ](https://t.me/maria_ilinyh).`

const maxTeamsAmountReached string = `–£–ø—Å... üëâüèªüëàüèª

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Å—Ç–∞ –Ω–∞ –∏–≥—Ä—É 4 –æ–∫—Ç—è–±—Ä—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.

–ù–æ –Ω–µ —Å—Ç–æ–∏—Ç –æ–ø—É—Å–∫–∞—Ç—å —Ä—É–∫–∏ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏! –ú—ã –º–æ–∂–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É –≤ —Ä–µ–∑–µ—Ä–≤, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∫–æ–º–∞–Ω–¥, –≤—ã –º–æ–≥–ª–∏ –∑–∞–Ω—è—Ç—å –∏—Ö –º–µ—Å—Ç–æ. 

–•–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∑–µ—Ä–≤?`

const maxTeamsAmount int64 = 23

type State string

const (
	EMPTY           State = "empty"
	REG_IS_FULL     State = "reg_is_full"
	TEAM_ID         State = "team_id"
	TEAM_NAME       State = "team_name"
	CAPTAIN_NAME    State = "captain_name"
	GROUP_NAME      State = "group_name"
	PHONE           State = "phone"
	AMOUNT          State = "amount"
	QUIZON_QUESTION State = "quizon_question"
	REG_END         State = "reg_end"
	ONE_MORE_TEAM   State = "one_more_team"
)

type UserStatesHandlerRepository interface {
	Begin(ctx context.Context) (pgx.Tx, error)
	Commit(ctx context.Context, tx pgx.Tx) error
	UpdateState(ctx context.Context, tx pgx.Tx, state model.UserState) error
	GetState(ctx context.Context, tx pgx.Tx, userID int64) (string, error)
	GetRegistrationDraft(ctx context.Context, tx pgx.Tx, userID int64) (model.RegistrationsDraft, error)
	GenerateTeamID(ctx context.Context, tx pgx.Tx) (int64, error)
	UpdateRegistrationDraft(ctx context.Context, tx pgx.Tx, in model.RegistrationsDraft) error
	CreateRegistration(ctx context.Context, tx pgx.Tx, in model.Registrations) error
	CheckTeamsAmount(ctx context.Context, tx pgx.Tx) (int64, error)
}

func defaultMessage(userID int64) tgbotapi.MessageConfig {
	response := tgbotapi.MessageConfig{}
	response.Text = DefaultErrorMessage
	response.ChatID = userID
	response.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	response.ParseMode = "Markdown"
	response.DisableWebPagePreview = true
	return response
}

func (u usecase) HandleUserState(ctx context.Context, update tgbotapi.Update) (tgbotapi.MessageConfig, error) {
	userID := update.Message.From.ID
	nickname := update.Message.From.UserName

	response := defaultMessage(userID)

	tx, err := u.registerStatesRepository.Begin(ctx)
	if err != nil {
		return response, err
	}
	defer utils.RollBackUnlessCommitted(ctx, tx)

	state, err := u.registerStatesRepository.GetState(ctx, tx, userID)
	if err != nil {
		return response, err
	}

	switch state {
	case string(EMPTY):
		return u.empty(ctx, userID)
	case string(REG_IS_FULL):
		return u.regIsFul(ctx, userID, update.Message.Text)
	case string(CAPTAIN_NAME):
		now := u.clock.Now()
		draft := model.RegistrationsDraft{
			UserID:      userID,
			TgContact:   nickname,
			CreatedAt:   now,
			UpdatedAt:   now,
			CaptainName: &update.Message.Text,
		}

		err = u.registerStatesRepository.UpdateRegistrationDraft(ctx, tx, draft)
		if err != nil {
			return response, err
		}

		newState := model.UserState{
			UserID: userID,
			State:  string(GROUP_NAME),
		}
		err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
		if err != nil {
			return response, err
		}

		err = u.registerStatesRepository.Commit(ctx, tx)
		if err != nil {
			return response, err
		}

		response.Text = "–¢–≤–æ—è —É—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ (–ü—Ä–∏–º–µ—Ä: –°–ú1-11)"
		return response, nil
	case string(GROUP_NAME):
		draft, err := u.registerStatesRepository.GetRegistrationDraft(ctx, tx, userID)
		if err != nil {
			return response, err
		}

		draft.GroupName = &update.Message.Text
		err = u.registerStatesRepository.UpdateRegistrationDraft(ctx, tx, draft)
		if err != nil {
			return response, err
		}

		newState := model.UserState{
			UserID: userID,
			State:  string(PHONE),
		}
		err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
		if err != nil {
			return response, err
		}

		err = u.registerStatesRepository.Commit(ctx, tx)
		if err != nil {
			return response, err
		}

		response.Text = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ü—Ä–∏–º–µ—Ä: 8(999)888-77-66)"
		return response, nil
	case string(PHONE):
		draft, err := u.registerStatesRepository.GetRegistrationDraft(ctx, tx, userID)
		if err != nil {
			return response, err
		}

		draft.Phone = &update.Message.Text
		err = u.registerStatesRepository.UpdateRegistrationDraft(ctx, tx, draft)
		if err != nil {
			return response, err
		}

		newState := model.UserState{
			UserID: userID,
			State:  string(TEAM_NAME),
		}
		err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
		if err != nil {
			return response, err
		}

		err = u.registerStatesRepository.Commit(ctx, tx)
		if err != nil {
			return response, err
		}

		response.Text = "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã"
		return response, nil
	case string(TEAM_NAME):
		draft, err := u.registerStatesRepository.GetRegistrationDraft(ctx, tx, userID)
		if err != nil {
			return response, err
		}

		draft.TeamName = &update.Message.Text
		err = u.registerStatesRepository.UpdateRegistrationDraft(ctx, tx, draft)
		if err != nil {
			return response, err
		}

		newState := model.UserState{
			UserID: userID,
			State:  string(AMOUNT),
		}
		err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
		if err != nil {
			return response, err
		}

		err = u.registerStatesRepository.Commit(ctx, tx)
		if err != nil {
			return response, err
		}

		response.Text = "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ? (–í –∫–æ–º–∞–Ω–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 4 –¥–æ 8 —á–µ–ª–æ–≤–µ–∫)"
		return response, nil
	case string(AMOUNT):
		draft, err := u.registerStatesRepository.GetRegistrationDraft(ctx, tx, userID)
		if err != nil {
			return response, err
		}

		draft.Amount = &update.Message.Text

		reg := model.Registrations{
			TgContact:   draft.TgContact,
			TeamID:      draft.TeamID,
			Phone:       *draft.Phone,
			TeamName:    *draft.TeamName,
			CaptainName: *draft.CaptainName,
			GroupName:   *draft.GroupName,
			Amount:      *draft.Amount,
			CreatedAt:   draft.CreatedAt,
			UpdatedAt:   draft.UpdatedAt,
		}
		err = u.registerStatesRepository.CreateRegistration(ctx, tx, reg)
		if err != nil {
			return response, err
		}

		newState := model.UserState{
			UserID: userID,
			State:  string(QUIZON_QUESTION),
		}
		err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
		if err != nil {
			return response, err
		}

		err = u.registerStatesRepository.Commit(ctx, tx)
		if err != nil {
			return response, err
		}

		b := tgbotapi.NewKeyboardButton("–ö–≤–∏–∑ON")
		r := tgbotapi.NewReplyKeyboard([]tgbotapi.KeyboardButton{b})
		response.Text = "–ö–≤–∏–∑OFF?"
		response.ReplyMarkup = &r
		return response, nil
	case string(QUIZON_QUESTION):
		if update.Message.Text != "–ö–≤–∏–∑ON" {
			b := tgbotapi.NewKeyboardButton("–ö–≤–∏–∑ON")
			r := tgbotapi.NewReplyKeyboard([]tgbotapi.KeyboardButton{b})
			response.Text = "–ö–≤–∏–∑OFF?"
			response.ReplyMarkup = &r
			return response, nil
		}

		newState := model.UserState{
			UserID: userID,
			State:  string(REG_END),
		}
		err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
		if err != nil {
			return response, err
		}

		err = u.registerStatesRepository.Commit(ctx, tx)
		if err != nil {
			return response, err
		}

		clown := tgbotapi.NewKeyboardButton("ü§°")
		row := tgbotapi.NewKeyboardButtonRow(clown)
		keyboard := tgbotapi.NewReplyKeyboard(row)
		response.ReplyMarkup = &keyboard
		response.Text = regSuccess
		return response, nil
	case string(REG_END):
		newState := model.UserState{
			UserID: userID,
			State:  string(ONE_MORE_TEAM),
		}
		err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
		if err != nil {
			return response, err
		}

		err = u.registerStatesRepository.Commit(ctx, tx)
		if err != nil {
			return response, err
		}

		response.ReplyMarkup = CreateYesNoKeyboard()
		response.Text = "–•–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É?"
		return response, nil
	case string(ONE_MORE_TEAM):
		if update.Message.Text == "–ù–µ—Ç" {
			newState := model.UserState{
				UserID: userID,
				State:  string(REG_END),
			}
			err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
			if err != nil {
				return response, err
			}

			btn := tgbotapi.NewKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
			row := tgbotapi.NewKeyboardButtonRow(btn)
			keyboard := tgbotapi.NewReplyKeyboard(row)
			response.ReplyMarkup = &keyboard
			response.Text = "–ù—É –∫–∞–∫ —Ö–æ—á–µ—à—å..."
			return response, nil
		}

		if update.Message.Text == "–î–∞" {
			amount, err := u.registerStatesRepository.CheckTeamsAmount(ctx, tx)
			if err != nil {
				return response, err
			}

			if amount >= maxTeamsAmount {
				newState := model.UserState{
					UserID: userID,
					State:  string(REG_IS_FULL),
				}
				err := u.registerStatesRepository.UpdateState(ctx, tx, newState)
				if err != nil {
					return response, err
				}

				err = u.registerStatesRepository.Commit(ctx, tx)
				if err != nil {
					return response, err
				}

				response.ReplyMarkup = CreateYesNoKeyboard()
				response.Text = maxTeamsAmountReached
				return response, nil
			}

			newState := model.UserState{
				UserID: userID,
				State:  string(CAPTAIN_NAME),
			}
			err = u.registerStatesRepository.UpdateState(ctx, tx, newState)
			if err != nil {
				return response, err
			}

			err = u.registerStatesRepository.Commit(ctx, tx)
			if err != nil {
				return response, err
			}

			response.Text = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)"
			return response, nil
		}
	}

	return response, fmt.Errorf("unknown state: %v", state)
}
