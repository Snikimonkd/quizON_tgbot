//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Registrations = newRegistrationsTable("public", "registrations", "")

type registrationsTable struct {
	postgres.Table

	// Columns
	UserID      postgres.ColumnInteger
	TgContact   postgres.ColumnString
	TeamID      postgres.ColumnString
	TeamName    postgres.ColumnString
	CaptainName postgres.ColumnString
	Phone       postgres.ColumnString
	GroupName   postgres.ColumnString
	Amount      postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RegistrationsTable struct {
	registrationsTable

	EXCLUDED registrationsTable
}

// AS creates new RegistrationsTable with assigned alias
func (a RegistrationsTable) AS(alias string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RegistrationsTable with assigned schema name
func (a RegistrationsTable) FromSchema(schemaName string) *RegistrationsTable {
	return newRegistrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RegistrationsTable with assigned table prefix
func (a RegistrationsTable) WithPrefix(prefix string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RegistrationsTable with assigned table suffix
func (a RegistrationsTable) WithSuffix(suffix string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRegistrationsTable(schemaName, tableName, alias string) *RegistrationsTable {
	return &RegistrationsTable{
		registrationsTable: newRegistrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newRegistrationsTableImpl("", "excluded", ""),
	}
}

func newRegistrationsTableImpl(schemaName, tableName, alias string) registrationsTable {
	var (
		UserIDColumn      = postgres.IntegerColumn("user_id")
		TgContactColumn   = postgres.StringColumn("tg_contact")
		TeamIDColumn      = postgres.StringColumn("team_id")
		TeamNameColumn    = postgres.StringColumn("team_name")
		CaptainNameColumn = postgres.StringColumn("captain_name")
		PhoneColumn       = postgres.StringColumn("phone")
		GroupNameColumn   = postgres.StringColumn("group_name")
		AmountColumn      = postgres.StringColumn("amount")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{UserIDColumn, TgContactColumn, TeamIDColumn, TeamNameColumn, CaptainNameColumn, PhoneColumn, GroupNameColumn, AmountColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, TgContactColumn, TeamIDColumn, TeamNameColumn, CaptainNameColumn, PhoneColumn, GroupNameColumn, AmountColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return registrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:      UserIDColumn,
		TgContact:   TgContactColumn,
		TeamID:      TeamIDColumn,
		TeamName:    TeamNameColumn,
		CaptainName: CaptainNameColumn,
		Phone:       PhoneColumn,
		GroupName:   GroupNameColumn,
		Amount:      AmountColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
