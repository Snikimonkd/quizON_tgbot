//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Registrations = newRegistrationsTable("public", "registrations", "")

type registrationsTable struct {
	postgres.Table

	// Columns
	GameID    postgres.ColumnInteger
	TeamID    postgres.ColumnInteger
	TeamName  postgres.ColumnString
	UserID    postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UdpatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RegistrationsTable struct {
	registrationsTable

	EXCLUDED registrationsTable
}

// AS creates new RegistrationsTable with assigned alias
func (a RegistrationsTable) AS(alias string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RegistrationsTable with assigned schema name
func (a RegistrationsTable) FromSchema(schemaName string) *RegistrationsTable {
	return newRegistrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RegistrationsTable with assigned table prefix
func (a RegistrationsTable) WithPrefix(prefix string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RegistrationsTable with assigned table suffix
func (a RegistrationsTable) WithSuffix(suffix string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRegistrationsTable(schemaName, tableName, alias string) *RegistrationsTable {
	return &RegistrationsTable{
		registrationsTable: newRegistrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newRegistrationsTableImpl("", "excluded", ""),
	}
}

func newRegistrationsTableImpl(schemaName, tableName, alias string) registrationsTable {
	var (
		GameIDColumn    = postgres.IntegerColumn("game_id")
		TeamIDColumn    = postgres.IntegerColumn("team_id")
		TeamNameColumn  = postgres.StringColumn("team_name")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UdpatedAtColumn = postgres.TimestampzColumn("udpated_at")
		allColumns      = postgres.ColumnList{GameIDColumn, TeamIDColumn, TeamNameColumn, UserIDColumn, CreatedAtColumn, UdpatedAtColumn}
		mutableColumns  = postgres.ColumnList{GameIDColumn, TeamIDColumn, TeamNameColumn, UserIDColumn, CreatedAtColumn, UdpatedAtColumn}
	)

	return registrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GameID:    GameIDColumn,
		TeamID:    TeamIDColumn,
		TeamName:  TeamNameColumn,
		UserID:    UserIDColumn,
		CreatedAt: CreatedAtColumn,
		UdpatedAt: UdpatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
